/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import * as P from ".prisma/client"
import { Context } from "./../context"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Criterion: P.Criterion;
  CriterionTranslation: P.CriterionTranslation;
  Query: {};
  Question: P.Question;
  QuestionTranslation: P.QuestionTranslation;
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Criterion: { // field return type
    icon: string | null; // String
    id: number | null; // Int
    subtitle: string | null; // String
    title: string | null; // String
    translations: Array<NexusGenRootTypes['CriterionTranslation'] | null> | null; // [CriterionTranslation]
  }
  CriterionTranslation: { // field return type
    criterionid: number | null; // Int
    id: number | null; // Int
    lang: string | null; // String
    subtitle: string | null; // String
    title: string | null; // String
  }
  Query: { // field return type
    criterions: NexusGenRootTypes['Criterion'][]; // [Criterion!]!
    question: NexusGenRootTypes['Question'] | null; // Question
    questions: NexusGenRootTypes['Question'][]; // [Question!]!
  }
  Question: { // field return type
    id: number | null; // Int
    text: string | null; // String
    translations: Array<NexusGenRootTypes['QuestionTranslation'] | null> | null; // [QuestionTranslation]
  }
  QuestionTranslation: { // field return type
    id: number | null; // Int
    lang: string | null; // String
    questionid: number | null; // Int
    translation: string | null; // String
  }
}

export interface NexusGenFieldTypeNames {
  Criterion: { // field return type name
    icon: 'String'
    id: 'Int'
    subtitle: 'String'
    title: 'String'
    translations: 'CriterionTranslation'
  }
  CriterionTranslation: { // field return type name
    criterionid: 'Int'
    id: 'Int'
    lang: 'String'
    subtitle: 'String'
    title: 'String'
  }
  Query: { // field return type name
    criterions: 'Criterion'
    question: 'Question'
    questions: 'Question'
  }
  Question: { // field return type name
    id: 'Int'
    text: 'String'
    translations: 'QuestionTranslation'
  }
  QuestionTranslation: { // field return type name
    id: 'Int'
    lang: 'String'
    questionid: 'Int'
    translation: 'String'
  }
}

export interface NexusGenArgTypes {
  Criterion: {
    subtitle: { // args
      lang: string; // String!
    }
    title: { // args
      lang: string; // String!
    }
    translations: { // args
      lang?: string | null; // String
    }
  }
  Query: {
    criterions: { // args
      lang?: string | null; // String
    }
    question: { // args
      id: number; // Int!
    }
    questions: { // args
      lang?: string | null; // String
    }
  }
  Question: {
    text: { // args
      lang: string; // String!
    }
    translations: { // args
      lang?: string | null; // String
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}